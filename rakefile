desc "generate secret key"
task :secret do
  require 'securerandom'
  STDOUT.puts SecureRandom.hex(64)
end

desc "server"
namespace :server do
  desc "start server"
  task :start, [:port, :ipaddr] do |_, args|
    port = args.port ? args.port : 3000
    ipaddr = args.ipaddr ? args.ipaddr : 'localhost'
    `bundle exec rackup app.ru -p #{port} --host #{ipaddr} > 1`
  end
end


require 'active_record'
require 'byebug'

def env
  ENV['RACK_ENV'] ||= 'development'
end
def config
  require 'yaml'
  @config ||= YAML::load(File.open("./config/database.yml"))
end

def load_config(_env=env)
  @db_config = config[_env].merge({'schema_search_path' => 'public'})
end

namespace :db do

  task :env do
    puts "use #{ENV['RACK_ENV']}"
  end

  desc "Create the database"
  task :create do
    %w[test development].each do |_env|
      ActiveRecord::Base.establish_connection load_config(_env)
      ActiveRecord::Base.connection
      puts "Database created #{env}."
    end
  end

  desc "Migrate the database"
  task :migrate, :env do |cmd, args|
    ActiveRecord::Base.establish_connection load_config(args.env || env)
    ActiveRecord::Migrator.migrate("db/migrates/")
    Rake::Task["db:schema"].invoke
    puts "Database migrated."
  end

  desc "Drop the database"
  task :drop do
    begin
      %w[test development].each do |_env|
        db = load_config(_env)['database']
        FileUtils.rm(Pathname.new(db))
        puts "Drop database: #{db}."
      end
    rescue => ex
      puts "#{ex}"
    end
  end

  desc "Reset the database"
  task :reset => [:drop, :create, :migrate]

  desc "Create a db/schema.rb file"
  task :schema do
    ActiveRecord::Base.establish_connection load_config
    require 'active_record/schema_dumper'
    filename = "db/schema.rb"
    File.open(filename, "w:utf-8") do |file|
      ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
    end
  end
end

namespace :generate do
  desc "generate db migration"
  task :migration do
    begin
      name = ARGV[1] || raise("Specify name: rake generate:migration your_migration")
      timestamp = Time.now.strftime("%Y%m%d%H%M%S")
      path = File.expand_path("./db/migrates/#{timestamp}_#{name}.rb", File.dirname(__FILE__))
      migration_class = name.split("_").map(&:capitalize).join

      File.open(path, 'w') do |file|
        file.write <<-EOF
class #{migration_class} < ActiveRecord::Migration[5.0]
  def change
#   create_table :#{name} do |t|
#     t.timestamps
#   end
  end
end
      EOF
      end

      puts "Migration #{path} created"
      abort
    rescue => ex
      puts ex
    end
  end
end
